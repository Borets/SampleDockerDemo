services:
  - type: web
    name: build-performance-demo-web
    runtime: docker
    plan: starter
    dockerfilePath: ./Dockerfile
    dockerCommand: npm start
    healthCheckPath: /api/health
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: build-performance-demo-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: build-performance-demo-cache
          property: connectionString
      - key: SESSION_SECRET
        generateValue: true
      - key: JWT_SECRET
        generateValue: true

  - type: web
    name: build-performance-demo-web-node
    runtime: node
    plan: starter
    buildCommand: |
      npm ci
      npm install -D webpack webpack-cli mini-css-extract-plugin css-loader style-loader babel-loader @babel/core @babel/preset-env @babel/preset-react
      npm run build
      npm run migrate
    startCommand: npm start
    healthCheckPath: /api/health
    envVars:
      - key: NODE_ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: build-performance-demo-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: build-performance-demo-cache
          property: connectionString
      - key: SESSION_SECRET
        generateValue: true
      - key: JWT_SECRET
        generateValue: true
    autoDeploy: true

  - type: redis
    name: build-performance-demo-cache
    ipAllowList: []
    plan: standard
    maxmemoryPolicy: noeviction

databases:
  - name: build-performance-demo-db
    databaseName: app_db
    user: app_user
    plan: basic-1gb
    ipAllowList: []